1.首先按照这个链接 http://valentfx.com/wiki/index.php?title=LOGI_-_Skeleton_Editor_-_Project
规划出skeleton
2.Export 然后下载那个zip文件，
3.将文件解压，里面有ucf，以及主要的vhd文件，以及工程xise文件
4.打开ise,打开工程xise
5.一开始会说少文件，路径在logi-hard/hdl/wishbone下.logi-hard在logibone的官网上下载
6.然后只需做个wrap,将接口重新打包。因为生成的是vhdl，而我将用verilog写top module，因此这是mixed。
这个是skeleton生成的模块，要包装的就是这个模块
entity pwm_skeleton is
	port(
		OSC_FPGA : in std_logic ;
		GPMC_AD :   inout  std_logic_vector((16-1) downto 0);
		GPMC_CSN :  in std_logic;
		GPMC_OEN :  in std_logic;
		GPMC_WEN :  in std_logic;
		GPMC_ADVN :  in std_logic;
		GPMC_CLK :  in std_logic;
		LED :   out  std_logic_vector((2-1) downto 0);
		PMOD1 :   inout  std_logic_vector((8-1) downto 0);
		PMOD2 :   inout  std_logic_vector((8-1) downto 0);
		ARD :   inout  std_logic_vector((6-1) downto 0);
		PB :  in std_logic_vector((2-1) downto 0);
		SW :  in std_logic_vector((2-1) downto 0);
		ARD_SCL :   inout  std_logic;
		ARD_SDA :   inout  std_logic	
	);
end pwm_skeleton;

这个是包装了skeleton模块的top module（verilog):
module top(
    inout W_ARD_SCL,
    inout W_ARD_SDA,
    inout [5:0] W_ARD,
    output [1:0] W_LED,
    input [1:0] W_PB,
    input [1:0] W_SW,
    inout [7:0] W_PMOD1,
    inout [7:0] W_PMOD2,
    input W_GPMC_CLK,
    input W_GPMC_CSN,
    input W_GPMC_ADVN,
    input W_GPMC_OEN,
    input W_GPMC_WEN,
    inout [15:0] W_GPMC_AD,
    input W_OSC_FPGA
    );

pwm_skeleton u1(.ARD_SCL(W_ARD_SCL),.ARD_SDA(W_ARD_SDA),.ARD(W_ARD),.LED(W_LED),
					.PB(W_PB),.SW(W_SW),.PMOD1(W_PMOD1),.PMOD2(W_PMOD2),.GPMC_CLK(W_GPMC_CLK),
					.GPMC_CSN(W_GPMC_CSN),.GPMC_ADVN(W_GPMC_ADVN),.GPMC_OEN(W_GPMC_OEN),
					.GPMC_WEN(W_GPMC_WEN),.GPMC_AD(W_GPMC_AD),.OSC_FPGA(W_OSC_FPGA));

endmodule
这个是最后的ucf文件：
##### Grouping Constraints #####
NET "W_OSC_FPGA" TNM_NET = clk50_grp;
NET "W_GPMC_CLK" TNM_NET = clk100_grp;
##### Clock Period Constraints #####
TIMESPEC TS_PER_CLK50 = PERIOD "clk50_grp" 20.0 ns;
TIMESPEC TS_PER_CLK100 = PERIOD "clk100_grp" 20.0 ns;


#######################
# Pin LOC Constraints #
#######################

#OSCILLATOR
NET "W_OSC_FPGA"				LOC = "P85";

#MISC###################################################################################
NET "W_ARD_SCL" LOC = "P80" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW ;
NET "W_ARD_SDA" LOC = "P79" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW ;
NET "W_ARD<5>" LOC = "P39" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW ;
NET "W_ARD<4>" LOC = "P64" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_ARD<3>" LOC = "P38" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW ;
NET "W_ARD<2>" LOC = "P21" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_ARD<1>" LOC = "P87" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_ARD<0>" LOC = "P84" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
#LED######################################################################################
NET "W_LED<0>"           LOC = "P140" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  ;   # 
NET "W_LED<1>"           LOC = "P74"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  ;   # 
#PUSH BUTTONS##############################################################################
NET "W_PB<0>"           LOC = "P83" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  ;   # 
NET "W_PB<1>"           LOC = "P59" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  ;   # 
#PUSH BUTTONS##############################################################################
NET "W_SW<0>"           LOC = "P75" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  ;   # 
NET "W_SW<1>"           LOC = "P78" | IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  ;   # 
#BB SPI PORT################################################################################
#NET "SYS_SPI_MISO"	LOC = "P61";#
#NET "SYS_SPI_SCK"		LOC = "P70";		#used to bitbang bitstream to fpga / Arduino SPI / BB SPI - see http://valentfx.com/wiki/index.php?title=LOGi-Bone_User_Guide
#NET "SYS_SPI_SS"		LOC = "P59"; #		
#NET "SYS_SPI_MOSI"	LOC = "P65";		#used to bitbang bitstream to fpga / Arduino SPI / BB SPI
#PMOD1######################################################################################
NET "W_PMOD1<0>"	LOC = "P112"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<1>"	LOC = "P111"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<2>"	LOC = "P67"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<3>"	LOC = "P66"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<4>"	LOC = "P62"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<5>"	LOC = "P61"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<6>"	LOC = "P58"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
NET "W_PMOD1<7>"	LOC = "P57"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW  |PULLUP;
#PMOD2########################################################################################
NET "W_PMOD2<0>"	LOC = "P56"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<1>"	LOC = "P55"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<2>"	LOC = "P46"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<3>"	LOC = "P45"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<4>"	LOC = "P48"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<5>"	LOC = "P47"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<6>"	LOC = "P44"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
NET "W_PMOD2<7>"	LOC = "P43"| IOSTANDARD = LVTTL | DRIVE = 2 | SLEW = SLOW |PULLUP;
#SATA##########################################################################################
#GPMC PORT##############################################################################
#GPMC CLK
NET "W_GPMC_CLK"           LOC = "P95"| IOSTANDARD = LVTTL | SLEW = FAST |  IOB=FORCE ;   # 
#GPMC CONTROL
NET "W_GPMC_CSN"          LOC = "P101"| IOSTANDARD = LVTTL | SLEW = FAST  |  IOB=FORCE ;  # 
NET "W_GPMC_ADVN"          LOC = "P119"| IOSTANDARD = LVTTL | SLEW = FAST   |  IOB=FORCE;   #
NET "W_GPMC_OEN"           LOC = "P118"| IOSTANDARD = LVTTL | SLEW = FAST   |  IOB=FORCE;   #  
#NET "GPMC_BEN<0>"          LOC = "P117"| IOSTANDARD = LVTTL | SLEW = FAST  |  IOB=FORCE ;   # 
#NET "GPMC_BEN<1>"          LOC = "P88"| IOSTANDARD = LVTTL | SLEW = FAST   |  IOB=FORCE;   # 
NET "W_GPMC_WEN"          LOC = "P116"| IOSTANDARD = LVTTL | SLEW = FAST  |  IOB=FORCE ;  # 
#GPMC A/D
NET "W_GPMC_AD<0>"   LOC = "P97"| IOSTANDARD = LVTTL | SLEW = FAST   |  IOB=FORCE ;   # 
NET "W_GPMC_AD<1>"   LOC = "P98"| IOSTANDARD = LVTTL | SLEW = FAST   |  IOB=FORCE;   # 
NET "W_GPMC_AD<2>"           LOC = "P121"| IOSTANDARD = LVTTL | SLEW = FAST  |  IOB=FORCE;   # 
NET "W_GPMC_AD<3>"           LOC = "P120"| IOSTANDARD = LVTTL | SLEW = FAST  |  IOB=FORCE;   # 
NET "W_GPMC_AD<4>"           LOC = "P99"| IOSTANDARD = LVTTL | SLEW = FAST  |  IOB=FORCE;  # 
NET "W_GPMC_AD<5>"           LOC = "P100"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;   # 
NET "W_GPMC_AD<6>"           LOC = "P124"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;   # 
NET "W_GPMC_AD<7>"           LOC = "P123"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;   # 
NET "W_GPMC_AD<8>"           LOC = "P102"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE;   # 
NET "W_GPMC_AD<9>"           LOC = "P105"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE;   # 
NET "W_GPMC_AD<10>"          LOC = "P104"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;  # 
NET "W_GPMC_AD<11>"          LOC = "P94"| IOSTANDARD = LVTTL |  SLEW = FAST  |  IOB=FORCE;   # 
NET "W_GPMC_AD<12>"          LOC = "P114"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;   # 
NET "W_GPMC_AD<13>"          LOC = "P115"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;  # 
NET "W_GPMC_AD<14>"          LOC = "P93"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;  # 
NET "W_GPMC_AD<15>"          LOC = "P92"| IOSTANDARD = LVTTL |  SLEW = FAST |  IOB=FORCE ;   # 
7.然后重新编译，生成bit文件。
8.在beaglebone里logi_loader xxx.bit
9.这个是要测试的python文件：
import sys
sys.path.append("/home/ubuntu/logi-tools/python/")

import time,math
import logi_hal

PWM_0=0x0000
logi_hal.setPWMDivider(PWM_0,0x04)
logi_hal.setPWMPeriod(PWM_0,0x0800)
t=3.1415926/2;
while True:
	val=abs(int(0x0800*math.sin(t)))
	logi_hal.setPWMPulse(PWM_0,0,val)
	time.sleep(0.04)
	t=t+0.01

注意前面添加的logi-tools的路径，logi-tools也要从logibone官网下
10.运行这个python文件：sudo python xxx.py
注意一定要加sudo权限
